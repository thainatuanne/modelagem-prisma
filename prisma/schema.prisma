// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Atualizar o Client
// npx prisma generate

// Gerar uma migration
// npx prisma migrate dev
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id     String  @id @default(uuid())
  nome   String  @db.VarChar(100)
  idade  Int     @db.Integer
  email  String  @unique @db.VarChar(100)
  senha  String  @db.VarChar(255) // criptografada
  gitHub String? @db.VarChar(100)

  criadoEm     DateTime @default(now()) @map("criadoEm")
  atualizadoEm DateTime @default(now()) @updatedAt

  produtos Produto[] //  um usuário pode ter vários produtos

  @@map("usuarios")
}

model Produto {
  id        String  @id @default(uuid())
  descricao String  @db.VarChar(200)
  valor     Decimal @db.Decimal(10, 2)
  estoque   Int     @db.Integer
  tipo      String  @db.VarChar(100)

  criadoProdutoEm DateTime @default(now()) @map("criado_produto_em")
  disponivel      Boolean? @default(false)

  // cada produto pertence a um usuário
  usuarioId    String // chave estrangeira do usuário que cadastrou o produto
  usuario      Usuario    @relation(fields: [usuarioId], references: [id])
  // cada produto pertence a uma loja
  lojaId       String // chave estrangeira da loja que vende o produto
  loja         Loja       @relation(fields: [lojaId], references: [id])
  // cada produto tem um fornecedor
  fornecedorId String // chave estrangeira do fornecedor do produto
  fornecedor   Fornecedor @relation(fields: [fornecedorId], references: [id])

  @@map("produtos")
}

model Loja {
  id           String         @id @default(uuid())
  cnpj         String         @unique @db.VarChar(14)
  nome         String         @db.VarChar(100)
  segmento     segmento_cnpj? @default(alimentacao) // padrão alimentação
  endereco     String         @db.VarChar(200)
  telefone     String?        @db.VarChar(20)
  filiais      Int            @db.Integer
  dataAbertura DateTime       @default(now()) @map("data_abertura")

  produtos Produto[] // uma loja pode ter vários produtos

  @@map("lojas")
}

enum segmento_cnpj {
  alimentacao
  tecnologia
  vestuario
  saude
  educacao
  mecanica
  outros
}

model Fornecedor {
  id        String @id @default(uuid())
  nome      String @db.VarChar(100)
  email     String @db.VarChar(100)
  avaliacao Int    @db.Integer

  criadoEm     DateTime @default(now()) @map("criado_em")
  atualizadoEm DateTime @updatedAt @map("atualizado_em")

  produtos Produto[] // um fornecedor pode fornecer vários produtos

  @@map("fornecedores")
}
